<?xml version="1.0" encoding="utf-8"?>
<wfext:Extension name="com.dassault_systemes.sma.plugin.optimization.Asa" version="3DX.0"
  xmlns:wfext="http://www.3ds.com/SMAExeExtensionsNoTypesUQ" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  extensionKind="Plugin">
	<DisplayName nlsFile="SMAWflOptimizationAsa" nlsID="dispname">Asa</DisplayName>
	<Description nlsFile="SMAWflOptimizationAsa" nlsID="desc">Adaptive Simulated Annealing</Description>
	<LongDescription nlsFile="SMAWflOptimizationAsa" nlsID="longdesc">
		<![CDATA[Adaptive Simulated Annealing

</span><span style="font-weight:bold">Classification:
</span><span>   &#8226; Exploratory Technique

</span><span style="font-weight:bold">Problem and Design Space:
</span><span>   &#8226; Well-suited for discontinuous design spaces
   
</span><span style="font-weight:bold">CPU Resources:
</span><span>   &#8226; Not well-suited for long running simulations

</span><span style="font-weight:bold">Gradient-Based: </span><span>No

</span><span style="font-weight:bold">Features:
</span><span>Obtains a solution with a minimal cost, from a problem which potentially has a great number of solutions. Distinguishes between different local optima.

Adaptive Simulated Annealing (ASA) algorithm is very well suited for solving highly non-linear problems with short running analysis codes, when finding the global optimum is more important than a quick improvement of the design. 

It helps to visualize the problems presented by such complex systems as geographical terrain. For example, consider a mountain range, with two "parameters," e.g. along the North-South and East-West directions. We wish to find the lowest valley in the terrain. ASA approaches this problem similar to using a bouncing ball that can bounce over mountains from valley to valley. We start at a high "temperature," where the temperature is an ASA parameter that mimics the effect of a fast moving particle in a hot object like a hot molten metal, thereby permitting the ball to make very high bounces and being able to bounce over any mountain to access any valley, given enough bounces. As the temperature is made relatively colder, the ball cannot bounce so high, and it also can settle to become trapped in relatively smaller ranges of valleys. 

We imagine that our mountain range is aptly described by a "cost function". We define probability distributions of the two directional parameters, called generating distributions since they generate possible valleys or states we have to explore. We define another distribution called the acceptance distribution which depends on the difference of cost functions of the present generated valley. We are to explore in the last saved lowest valley. The acceptance distribution decides probabilistically, whether to stay in a new valley or to bounce out of it. All the generating and acceptance distributions depend on temperatures. 

In a D-dimensional parameter space with parameters p^i having ranges [A_i, B_i], about the k'th last saved point (e.g, a local optima), p_k^i, a new point is generated using a distribution defined by the product of distributions for each parameter, g^i(y^i; T_i), in terms of random variables y^i in [-1, 1], where p_k+1^i = p_k^i + y^i(B_i - A_i), and "temperatures" T_i, g^i(y^i; T_i) = 1/[2(|y^i| + T_i)(1 + 1/T_i)]. 

The cost functions, C(p_k+1) - C(p_k), are compared using a uniform random generator, U in [0, 1), in a "Boltzmann" test: If exp[-(C(p_k+1) - C(p_k))/T_cost] > U, where T_cost is the "temperature" used for this test, then the new point is accepted as the new saved point for the next iteration. Otherwise, the last saved point is retained. 

The annealing schedule for each parameter temperature, T_i, from a starting temperature T_i0, is:
   T_i(k_i) = T_0i exp(-c_i k_i^(1/D)). 

The annealing schedule for the cost temperature is developed similarly to the parameter temperatures. However, the index for reannealing the cost function, k_cost, is determined by the number of accepted points, instead of the number of generated points as used for the parameters. 

T_cost(k_cost) = T_0cost exp(-c_cost k_cost^(1/D)). 

As determined by the technique options selected, the parameter "temperatures" may be periodically adaptively reannealed, or increased relative to their previous values, using their relative first derivatives with respect to the cost function, to guide the search "fairly" among the parameters. 

As determined by the technique options selected, the reannealing of the cost temperature resets the scale of the the annealing of the cost acceptance criteria using new T_0cost value. The new T_0cost is taken to be the minimum of the current initial cost temperature and the maximum of the absolute values of the best and last cost functions and their difference. The new k_cost is calculated taking T_cost as the maximum of the current value and the absolute value of the difference between the last and best saved minima of the cost function, constrained not to exceed the current initial cost temperature. This procedure essentially resets the scale of the annealing of the cost temperature within the scale of the current best or last saved minimum. 

</span><span style="font-weight:bold">Basic Tuning Parameters:
</span><span>   &#8226; Max. Number of Generated Designs: 
         Maximum number of generated designs during optimization. This number does not account for the 5 initial designs used by the algorithm to determine the starting temperature of the cost function. The type of value is integer. The default value is 10000. Other possible values are >= 1. 
   
   &#8226; Number of Designs for Convergence Check: 
         A simple convergence check is implemented in the ASA algorithm. The cost value of each accepted design is compared to the cost value of the best design found so far. If the two values differ by less than Convergence Epsilon for N consecutive times (where N is Number of Designs for Convergence Check), optimization is terminated. The type of value is integer. The default value is 5. Other possible values are >= 2. 
   
   &#8226; Convergence Epsilon: 
         Maximum difference of cost value between each accepted design and the best design found so far, to indicate that optimization is converged. The convergence criterion must be satisfied for N consecutive time (where N is Number of Designs for Convergence Check). The type of value is real. The default value is 1e-8. Other possible values are >= 0. 
   
   &#8226; Relative Rate of Parameter Annealing: 
         Relative speed of reducing parameter temperatures during optimization. Reducing the value down from 1.0 will allow parameter temperatures to stay high for a longer time (more variation within generated designs). Increasing the value up from 1.0 will reduce parameter temperatures faster (less variation in the generated designs). The type of value is real. The default value is 1.0. Other possible values are > 0. 
   
   &#8226; Relative Rate of Cost Annealing: 
         Relative speed of reducing cost function temperature during optimization. Reducing the value down from 1.0 will allow cost temperature to stay high for a longer time (more generated designs are accepted by the algorithm). Increasing the value up from 1.0 will reduce cost temperature faster (more generated designs are rejected by the algorithm). The type of value is real. The default value is 1.0. Other possible values are > 0. 
   
   &#8226; Relative Rate of Parameter Quenching: 
         Parameter quenching is a process of rapid reduction of the parameter temperatures and in effect overrides the slow annealing process and turns it into a fast quenching process. Using quenching considerably reduces the variability of the generated designs, making finding a global optimum less likely and greatly increases chances of convergence to a local optimum. Increasing the value up from 1.0 will activate the rapid parameter temperature reduction. Reducing the value down from 1.0 will greatly extend the time required to reduce parameter temperature for convergence. Use quenching only if you want to considerably speed up or slow down the convergence of the algorithm. The type of value is real. The default value is 1.0. Other possible values are > 0. 
   
   &#8226; Relative Rate of Cost Quenching: 
         Cost quenching is a process of rapid reduction of the cost temperatures and in effect overrides the slow annealing process and turns it into a fast quenching process. Using quenching considerably reduces the acceptance probability, reducing the chances of finding a global optimum and greatly increasing the chances of convergence to a local optimum. Increasing the value up from 1.0 will activate the rapid cost temperature reduction. Reducing the value down from 1.0 will greatly extend the time required to reduce cost temperature for con vergence. Use quenching only if you want to considerably speed up or slow down the convergence of the algorithm. The type of value is real. The default value is 1.0. Other possible values are > 0. 
   
   &#8226; Max. Number of Failed Designs: 
         Maximum number of consecutive design analysis failures before the algorithm terminates. Due to the random nature of the algorithm, it is possible to generate designs that cannot be handled by the analysis code(s). Such occasional failures are ignored by the ASA algorithm. If the failures become persistent, the algorithm will stop executing. The type of value is integer. The default value is 5. Other possible values are >= 1.
     
</span><span style="font-weight:bold">Advanced Tuning Parameters:
</span><span>   &#8226; Init. Param. Temperature: 
         Initial parameter temperature. This parameter can be used to extend or reduce the execution time of the algorithm without changing the nature of the search. The type of value is real. The default value is 1.0. Other possible values are > 0. 
   
   &#8226; Reanneal Parameters: 
         When the algorithm comes to a stagnation point, it may be beneficial to re-start the annealing process again using the best design point found so far. If this option is set to yes, ASA algorithm will employ several criteria to determine when a reannealing of parameters must be performed. One of the criteria is Num of Generated Designs Before Reannealing. Another criterion is Num of Accepted Designs Before Reannealing. The most effective criterion is Min Ratio of Accepted Designs for Reannealing. The default setting is yes. 
   
   &#8226; Reanneal Cost Function: 
         When the algorithm comes to a stagnation point, it may be beneficial to re-start the annealing process again using the best design point found so far. If this option is set to yes, ASA algorithm will employ several criteria to determine when a reannealing of cost function must be performed (same criteria as for parameter reannealing). One of the criteria is Num of Generated Designs Before Reannealing. Another criterion is Num of Accepted Designs Before Reannealing. The most effective criterion is Min Ratio of Accepted Designs for Reannealing. The default setting is yes. 
   
   &#8226; Num. Gener. Designs Before Reannealing: 
         When the number of generated designs reaches this value, reannealing of parameter and/or cost function temperatures will be performed, if allowed by the previous options. The type of value is integer. The default value is 1000. Other possible values are >= 1. 
   
   &#8226; Num. Accepted Designs Before Reannealing: 
         When the number of accepted designs reaches this value, reannealing of parameter and/or cost function temperatures will be performed, if allowed by the previous options. The type of value is integer. The default value is 100. Other possible values are >= 1. 
   
   &#8226; Min. Ratio of Accepted Designs for Reannealing: 
         When the ratio of the number of accepted designs to the number of generated designs reaches this value, reannealing of parameter and/or cost function temperatures will be performed, if allowed by the previous options. The type of value is real. The default value is 10e-6. Other possible values are >= 0. 
   
   &#8226; Rel. Gradient Step for Param. Reannealing 
         During reannealing, parameter temperatures are increased in proportion to their effect on the cost function. To determine the effect of each parameter (design variable) on the cost function, gradients of the cost function are calculated using the finite differencing method. This parameter controls the value of the parameter step used for gradient calculation. The type of value is real. The default value is 0.001 (0.1 percent). Other possible values are >= 0.]]>
	</LongDescription>
	<Attributes>
		<Attribute name="JavaName">
			<Value>com.engineous.plugin.optimization.Asa</Value>
		</Attribute>
		<Attribute name="Category">
			<Value>Plugin</Value>
		</Attribute>
		<Attribute name="PluginType">
			<Value>Optimization_Technique</Value>
		</Attribute>
		<Attribute name="EnableRunInParallel">
			<Value>false</Value>
		</Attribute>
	</Attributes>
	<Streams>
		<Stream name="NLS" streamKind="NLS" sourceFilename="SMAWflOptimizationAsa.CATNls" targetFilename="SMAWflOptimizationAsa.CATNls"/>
		<Stream name="NLS_Japanese" streamKind="NLS" sourceFilename="SMAWflOptimizationAsa_Japanese.CATNls" targetFilename="SMAWflOptimizationAsa_Japanese.CATNls" locale="Japanese"/>
	</Streams>
	<Interfaces>
		<Interface interfaceKind="Runtime">
			<Implementations>
				<Implementation language="java">
					<Class>com.dassault_systemes.smaexe.plugin.optimization.asa.ASA</Class>
					<StreamRefs>
						<StreamRef refStreamName="CodeJar"/>
					</StreamRefs>
				</Implementation>
			</Implementations>
		</Interface>
	</Interfaces>
	<Properties>
		<Property name="ExecutesInParallel" type="boolean" valuetype="single">
			<Value>false</Value>
		</Property>

		<Property name="Technique Options" type="aggregate" valuetype="single">
			<Property name="Max Number of Generated Designs" type="integer" valuetype="single">
				<Value>10000</Value>
			</Property>
			<Property name="Number of Designs for Convergence Check" type="integer" valuetype="single">
				<Value>5</Value>
			</Property>
			<Property name="Convergence Epsilon" type="real" valuetype="single">
				<Value>1.0e-8</Value>
			</Property>
			<Property name="Relative Rate of Parameter Annealing" type="real" valuetype="single">
				<Value>1.0</Value>
			</Property>
			<Property name="Relative Rate of Cost Annealing" type="real" valuetype="single">
				<Value>1.0</Value>
			</Property>
			<Property name="Relative Rate of Parameter Quenching" type="real" valuetype="single">
				<Value>1.0</Value>
			</Property>
			<Property name="Relative Rate of Cost Quenching" type="real" valuetype="single">
				<Value>1.0</Value>
			</Property>
			<Property name="Max Number of Failed Designs" type="integer" valuetype="single">
				<Value>5</Value>
			</Property>
			<Property name="Init Param Temperature" type="real" valuetype="single">
				<Value>1.0</Value>
			</Property>
			<Property name="Reanneal Parameters" type="boolean" valuetype="single">
				<Value>true</Value>
			</Property>
			<Property name="Reanneal Cost Function" type="boolean" valuetype="single">
				<Value>true</Value>
			</Property>
			<Property name="Num of Gener Designs Before Reannealing" type="integer" valuetype="single">
				<Value>1000</Value>
			</Property>
			<Property name="Num of Accepted Designs Before Reannealing" type="integer" valuetype="single">
				<Value>100</Value>
			</Property>
			<Property name="Min Ratio of Accepted Designs for Reannealing" type="real" valuetype="single">
				<Value>0.000001</Value>
			</Property>
			<Property name="Rel Gradient Step for Param Reannealing" type="real" valuetype="single">
				<Value>0.001</Value>
			</Property>
			<Property name="Penalty Base" type="real" valuetype="single">
				<Value>0.0</Value>
			</Property>
			<Property name="Penalty Multiplier" type="real" valuetype="single">
				<Value>1000.0</Value>
			</Property>
			<Property name="Penalty Exponent" type="integer" valuetype="single">
				<Value>2</Value>
			</Property>
			<Property name="Max Failed Runs" type="integer" valuetype="single">
				<Value>5</Value>
			</Property>
			<Property name="Failed Run Penalty Value" type="real" valuetype="single">
				<Value>1.0e30</Value>
			</Property>
			<Property name="Failed Run Objective Value" type="real" valuetype="single">
				<Value>1.0e30</Value>
			</Property>
			<Property name="Use fixed random seed" type="boolean" valuetype="single">
				<Value>false</Value>
			</Property>
			<Property name="Random seed value" type="integer" valuetype="single">
				<Value>-1</Value>
			</Property>
		</Property>
	</Properties>
</wfext:Extension>
